syntax = "proto3";

package google.datastore.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/duration.proto";


extend google.protobuf.FieldOptions {
  repeated FieldBehavior field_behavior = 1052 [packed = false];
}

enum FieldBehavior {
  FIELD_BEHAVIOR_UNSPECIFIED = 0;
  OPTIONAL = 1;
  REQUIRED = 2;
  OUTPUT_ONLY = 3;
  INPUT_ONLY = 4;
  IMMUTABLE = 5;
  UNORDERED_LIST = 6;
  NON_EMPTY_DEFAULT = 7;
  IDENTIFIER = 8;
}

service Datastore {
  // Just starting with a simple Ping method for testing connection
  rpc Ping(PingRequest) returns (PingResponse);
  
  // The basic Datastore methods we'll implement later
  rpc BeginTransaction(BeginTransactionRequest) returns (BeginTransactionResponse);
  rpc Lookup(LookupRequest) returns (LookupResponse);
  rpc RunQuery(RunQueryRequest) returns (RunQueryResponse);
  rpc Commit(CommitRequest) returns (CommitResponse);
  rpc Rollback(RollbackRequest) returns (RollbackResponse);
  rpc RunAggregationQuery(RunAggregationQueryRequest) returns (RunAggregationQueryResponse);
  rpc AllocateIds(AllocateIdsRequest) returns (AllocateIdsResponse);
  rpc ReserveIds(ReserveIdsRequest) returns (ReserveIdsResponse);
}

// Custom message for testing connection
message PingRequest {
  string message = 1;
}

message PingResponse {
  string message = 1;
  google.protobuf.Timestamp server_time = 2;
}

message RunAggregationQueryRequest {
  // Required. The ID of the project against which to make the request.
  string project_id = 8 [(field_behavior) = REQUIRED];

  // The ID of the database against which to make the request.
  //
  // '(default)' is not allowed; please use empty string '' to refer the default
  // database.
  string database_id = 9;

  // Entities are partitioned into subsets, identified by a partition ID.
  // Queries are scoped to a single partition.
  // This partition ID is normalized with the standard default context
  // partition ID.
  PartitionId partition_id = 2;

  // The options for this query.
  ReadOptions read_options = 1;

  // The type of query.
  oneof query_type {
    // The query to run.
    AggregationQuery aggregation_query = 3;

    // The GQL query to run. This query must be an aggregation query.
    GqlQuery gql_query = 7;
  }

  // Optional. Explain options for the query. If set, additional query
  // statistics will be returned. If not, only query results will be returned.
  ExplainOptions explain_options = 11 [(field_behavior) = OPTIONAL];
}
message AggregationResult {
  // The result of the aggregation functions, ex: `COUNT(*) AS total_entities`.
  //
  // The key is the
  // [alias][google.datastore.v1.AggregationQuery.Aggregation.alias] assigned to
  // the aggregation function on input and the size of this map equals the
  // number of aggregation functions in the query.
  map<string, Value> aggregate_properties = 2;
}

// A batch of aggregation results produced by an aggregation query.
message AggregationResultBatch {
  // The aggregation results for this batch.
  repeated AggregationResult aggregation_results = 1;

  // The state of the query after the current batch.
  // Only COUNT(*) aggregations are supported in the initial launch. Therefore,
  // expected result type is limited to `NO_MORE_RESULTS`.
  QueryResultBatch.MoreResultsType more_results = 2;

  // Read timestamp this batch was returned from.
  //
  // In a single transaction, subsequent query result batches for the same query
  // can have a greater timestamp. Each batch's read timestamp
  // is valid for all preceding batches.
  google.protobuf.Timestamp read_time = 3;
}

message AggregationQuery {
  // Defines an aggregation that produces a single result.
  message Aggregation {
    // Count of entities that match the query.
    //
    // The `COUNT(*)` aggregation function operates on the entire entity
    // so it does not require a field reference.
    message Count {
      // Optional. Optional constraint on the maximum number of entities to
      // count.
      //
      // This provides a way to set an upper bound on the number of entities
      // to scan, limiting latency, and cost.
      //
      // Unspecified is interpreted as no bound.
      //
      // If a zero value is provided, a count result of zero should always be
      // expected.
      //
      // High-Level Example:
      //
      // ```
      // AGGREGATE COUNT_UP_TO(1000) OVER ( SELECT * FROM k );
      // ```
      //
      // Requires:
      //
      // * Must be non-negative when present.
      google.protobuf.Int64Value up_to = 1
          [(field_behavior) = OPTIONAL];
    }

    // Sum of the values of the requested property.
    //
    // * Only numeric values will be aggregated. All non-numeric values
    // including `NULL` are skipped.
    //
    // * If the aggregated values contain `NaN`, returns `NaN`. Infinity math
    // follows IEEE-754 standards.
    //
    // * If the aggregated value set is empty, returns 0.
    //
    // * Returns a 64-bit integer if all aggregated numbers are integers and the
    // sum result does not overflow. Otherwise, the result is returned as a
    // double. Note that even if all the aggregated values are integers, the
    // result is returned as a double if it cannot fit within a 64-bit signed
    // integer. When this occurs, the returned value will lose precision.
    //
    // * When underflow occurs, floating-point aggregation is non-deterministic.
    // This means that running the same query repeatedly without any changes to
    // the underlying values could produce slightly different results each
    // time. In those cases, values should be stored as integers over
    // floating-point numbers.
    message Sum {
      // The property to aggregate on.
      PropertyReference property = 1;
    }

    // Average of the values of the requested property.
    //
    // * Only numeric values will be aggregated. All non-numeric values
    // including `NULL` are skipped.
    //
    // * If the aggregated values contain `NaN`, returns `NaN`. Infinity math
    // follows IEEE-754 standards.
    //
    // * If the aggregated value set is empty, returns `NULL`.
    //
    // * Always returns the result as a double.
    message Avg {
      // The property to aggregate on.
      PropertyReference property = 1;
    }

    // The type of aggregation to perform, required.
    oneof operator {
      // Count aggregator.
      Count count = 1;

      // Sum aggregator.
      Sum sum = 2;

      // Average aggregator.
      Avg avg = 3;
    }

    // Optional. Optional name of the property to store the result of the
    // aggregation.
    //
    // If not provided, Datastore will pick a default name following the format
    // `property_<incremental_id++>`. For example:
    //
    // ```
    // AGGREGATE
    //   COUNT_UP_TO(1) AS count_up_to_1,
    //   COUNT_UP_TO(2),
    //   COUNT_UP_TO(3) AS count_up_to_3,
    //   COUNT(*)
    // OVER (
    //   ...
    // );
    // ```
    //
    // becomes:
    //
    // ```
    // AGGREGATE
    //   COUNT_UP_TO(1) AS count_up_to_1,
    //   COUNT_UP_TO(2) AS property_1,
    //   COUNT_UP_TO(3) AS count_up_to_3,
    //   COUNT(*) AS property_2
    // OVER (
    //   ...
    // );
    // ```
    //
    // Requires:
    //
    // * Must be unique across all aggregation aliases.
    // * Conform to [entity property
    // name][google.datastore.v1.Entity.properties] limitations.
    string alias = 7 [(field_behavior) = OPTIONAL];
  }

  // The base query to aggregate over.
  oneof query_type {
    // Nested query for aggregation
    Query nested_query = 1;
  }

  // Optional. Series of aggregations to apply over the results of the
  // `nested_query`.
  //
  // Requires:
  //
  // * A minimum of one and maximum of five aggregations per query.
  repeated Aggregation aggregations = 3
      [(field_behavior) = OPTIONAL];
}

message PlanSummary {
  // The indexes selected for the query. For example:
  //  [
  //    {"query_scope": "Collection", "properties": "(foo ASC, __name__ ASC)"},
  //    {"query_scope": "Collection", "properties": "(bar ASC, __name__ ASC)"}
  //  ]
  repeated google.protobuf.Struct indexes_used = 1;
}

message ExecutionStats {
  // Total number of results returned, including documents, projections,
  // aggregation results, keys.
  int64 results_returned = 1;

  // Total time to execute the query in the backend.
  google.protobuf.Duration execution_duration = 3;

  // Total billable read operations.
  int64 read_operations = 4;

  // Debugging statistics from the execution of the query. Note that the
  // debugging stats are subject to change as Firestore evolves. It could
  // include:
  //  {
  //    "indexes_entries_scanned": "1000",
  //    "documents_scanned": "20",
  //    "billing_details" : {
  //       "documents_billable": "20",
  //       "index_entries_billable": "1000",
  //       "min_query_cost": "0"
  //    }
  //  }
  google.protobuf.Struct debug_stats = 5;
}

message ExplainMetrics {
  PlanSummary plan_summary = 1;
  ExecutionStats execution_stats = 2;
}
// A representation of a kind.
// The response for
// [Datastore.RunAggregationQuery][google.datastore.v1.Datastore.RunAggregationQuery].
message RunAggregationQueryResponse {
  AggregationResultBatch batch = 1;
  AggregationQuery query = 2;
  bytes transaction = 5;
  ExplainMetrics explain_metrics = 9;
}

// Basic messages needed for BeginTransaction

message BeginTransactionRequest {
  string project_id = 8 [(field_behavior) = REQUIRED];
  string database_id = 9;
  TransactionOptions transaction_options = 10;

}

message BeginTransactionResponse {
  bytes transaction = 1;
}

message TransactionOptions {
  message ReadWrite {
    bytes previous_transaction = 1;
  }
  message ReadOnly {
    google.protobuf.Timestamp read_time = 1;
  }
  oneof mode {
    ReadWrite read_write = 1;
    ReadOnly read_only = 2;
  }
}

// Placeholder for other message types we'll implement later
message LookupRequest {
  string project_id = 8 [(field_behavior) = REQUIRED];
  string database_id = 9;
  ReadOptions read_options = 1;
  repeated Key keys = 3 [(field_behavior) = REQUIRED];
  PropertyMask property_mask = 5;
}

message LookupResponse {
  repeated EntityResult found = 1;
  repeated EntityResult missing = 2;
  repeated Key deferred = 3;
  bytes transaction = 5;
  google.protobuf.Timestamp read_time = 7;
}

message Key {
  // A (kind, ID/name) pair used to construct a key path.
  //
  // If either name or ID is set, the element is complete.
  // If neither is set, the element is incomplete.
  message PathElement {
    // The kind of the entity.
    //
    // A kind matching regex `__.*__` is reserved/read-only.
    // A kind must not contain more than 1500 bytes when UTF-8 encoded.
    // Cannot be `""`.
    //
    // Must be valid UTF-8 bytes. Legacy values that are not valid UTF-8 are
    // encoded as `__bytes<X>__` where `<X>` is the base-64 encoding of the
    // bytes.
    string kind = 1;

    // The type of ID.
    oneof id_type {
      // The auto-allocated ID of the entity.
      //
      // Never equal to zero. Values less than zero are discouraged and may not
      // be supported in the future.
      int64 id = 2;

      // The name of the entity.
      //
      // A name matching regex `__.*__` is reserved/read-only.
      // A name must not be more than 1500 bytes when UTF-8 encoded.
      // Cannot be `""`.
      //
      // Must be valid UTF-8 bytes. Legacy values that are not valid UTF-8 are
      // encoded as `__bytes<X>__` where `<X>` is the base-64 encoding of the
      // bytes.
      string name = 3;
    }
  }

  // Entities are partitioned into subsets, currently identified by a project
  // ID and namespace ID.
  // Queries are scoped to a single partition.
  PartitionId partition_id = 1;

  // The entity path.
  // An entity path consists of one or more elements composed of a kind and a
  // string or numerical identifier, which identify entities. The first
  // element identifies a _root entity_, the second element identifies
  // a _child_ of the root entity, the third element identifies a child of the
  // second entity, and so forth. The entities identified by all prefixes of
  // the path are called the element's _ancestors_.
  //
  // An entity path is always fully complete: *all* of the entity's ancestors
  // are required to be in the path along with the entity identifier itself.
  // The only exception is that in some documented cases, the identifier in the
  // last path element (for the entity) itself may be omitted. For example,
  // the last path element of the key of `Mutation.insert` may have no
  // identifier.
  //
  // A path can never be empty, and a path can have at most 100 elements.
  repeated PathElement path = 2;
}

message PartitionId {
  string project_id = 2;
  string database_id = 3;
  string namespace_id = 4;
}

message EntityResult {
  // Specifies what data the 'entity' field contains.
  // A `ResultType` is either implied (for example, in `LookupResponse.missing`
  // from `datastore.proto`, it is always `KEY_ONLY`) or specified by context
  // (for example, in message `QueryResultBatch`, field `entity_result_type`
  // specifies a `ResultType` for all the values in field `entity_results`).
  enum ResultType {
    // Unspecified. This value is never used.
    RESULT_TYPE_UNSPECIFIED = 0;

    // The key and properties.
    FULL = 1;

    // A projected subset of properties. The entity may have no key.
    PROJECTION = 2;

    // Only the key.
    KEY_ONLY = 3;
  }

  // The resulting entity.
  Entity entity = 1;

  // The version of the entity, a strictly positive number that monotonically
  // increases with changes to the entity.
  //
  // This field is set for
  // [`FULL`][google.datastore.v1.EntityResult.ResultType.FULL] entity results.
  //
  // For [missing][google.datastore.v1.LookupResponse.missing] entities in
  // `LookupResponse`, this is the version of the snapshot that was used to look
  // up the entity, and it is always set except for eventually consistent reads.
  int64 version = 4;

  // The time at which the entity was created.
  // This field is set for
  // [`FULL`][google.datastore.v1.EntityResult.ResultType.FULL] entity results.
  // If this entity is missing, this field will not be set.
  google.protobuf.Timestamp create_time = 6;

  // The time at which the entity was last changed.
  // This field is set for
  // [`FULL`][google.datastore.v1.EntityResult.ResultType.FULL] entity results.
  // If this entity is missing, this field will not be set.
  google.protobuf.Timestamp update_time = 5;

  // A cursor that points to the position after the result entity.
  // Set only when the `EntityResult` is part of a `QueryResultBatch` message.
  bytes cursor = 3;
}

message Entity {
  Key key = 1;
  map<string, Value> properties = 3;
}

enum NullValue {
  NULL_VALUE = 0;
}

message LatLng {
  double latitude = 1;
  double longitude = 2;
}

message Value {
  oneof value_type {
    NullValue null_value = 11;  // Now just use the simple name
    bool boolean_value = 1;
    int64 integer_value = 2;
    double double_value = 3;
    google.protobuf.Timestamp timestamp_value = 10;
    Key key_value = 5;
    string string_value = 17;
    bytes blob_value = 18;
    LatLng geo_point_value = 8;
    Entity entity_value = 6;
    ArrayValue array_value = 9;
  }
  int32 meaning = 14;
  bool exclude_from_indexes = 19;
}


message ArrayValue {
  repeated Value values = 1;
}

message ReadOptions {
  enum ReadConsistency {
    // Unspecified. This value must not be used.
    READ_CONSISTENCY_UNSPECIFIED = 0;

    // Strong consistency.
    STRONG = 1;

    // Eventual consistency.
    EVENTUAL = 2;
  }

  oneof consistency_type {
    ReadConsistency read_consistency = 1;
    bytes transaction = 2;
    TransactionOptions new_transaction = 3;
    google.protobuf.Timestamp read_time = 4;
  }
}

message PropertyMask {
  repeated string paths = 1;
}

message ExplainOptions {
  bool analyze = 1 [(field_behavior) = OPTIONAL];
}

message RunQueryRequest {
  string project_id = 8 [(field_behavior) = REQUIRED];
  string database_id = 9;
  PartitionId partition_id = 2;
  ReadOptions read_options = 1;
  oneof query_type {
    Query query = 3;
    GqlQuery gql_query = 7;
  }
  PropertyMask property_mask = 10;
  ExplainOptions explain_options = 12 [(field_behavior) = OPTIONAL];
}

message Projection {
  // The property to project.
  PropertyReference property = 1;
}

message FindNearest {
  // The distance measure to use when comparing vectors.
  enum DistanceMeasure {
    // Should not be set.
    DISTANCE_MEASURE_UNSPECIFIED = 0;

    // Measures the EUCLIDEAN distance between the vectors. See
    // [Euclidean](https://en.wikipedia.org/wiki/Euclidean_distance) to learn
    // more. The resulting distance decreases the more similar two vectors are.
    EUCLIDEAN = 1;

    // COSINE distance compares vectors based on the angle between them, which
    // allows you to measure similarity that isn't based on the vectors
    // magnitude. We recommend using DOT_PRODUCT with unit normalized vectors
    // instead of COSINE distance, which is mathematically equivalent with
    // better performance. See [Cosine
    // Similarity](https://en.wikipedia.org/wiki/Cosine_similarity) to learn
    // more about COSINE similarity and COSINE distance. The resulting COSINE
    // distance decreases the more similar two vectors are.
    COSINE = 2;

    // Similar to cosine but is affected by the magnitude of the vectors. See
    // [Dot Product](https://en.wikipedia.org/wiki/Dot_product) to learn more.
    // The resulting distance increases the more similar two vectors are.
    DOT_PRODUCT = 3;
  }

  // Required. An indexed vector property to search upon. Only documents which
  // contain vectors whose dimensionality match the query_vector can be
  // returned.
  PropertyReference vector_property = 1
      [(field_behavior) = REQUIRED];

  // Required. The query vector that we are searching on. Must be a vector of no
  // more than 2048 dimensions.
  Value query_vector = 2 [(field_behavior) = REQUIRED];

  // Required. The Distance Measure to use, required.
  DistanceMeasure distance_measure = 3 [(field_behavior) = REQUIRED];

  // Required. The number of nearest neighbors to return. Must be a positive
  // integer of no more than 100.
  google.protobuf.Int32Value limit = 4 [(field_behavior) = REQUIRED];

  // Optional. Optional name of the field to output the result of the vector
  // distance calculation. Must conform to [entity
  // property][google.datastore.v1.Entity.properties] limitations.
  string distance_result_property = 5 [(field_behavior) = OPTIONAL];

  // Optional. Option to specify a threshold for which no less similar documents
  // will be returned. The behavior of the specified `distance_measure` will
  // affect the meaning of the distance threshold. Since DOT_PRODUCT distances
  // increase when the vectors are more similar, the comparison is inverted.
  //
  // For EUCLIDEAN, COSINE: WHERE distance <= distance_threshold
  // For DOT_PRODUCT:       WHERE distance >= distance_threshold
  google.protobuf.DoubleValue distance_threshold = 6
      [(field_behavior) = OPTIONAL];
}
message PropertyOrder {
  // The sort direction.
  enum Direction {
    // Unspecified. This value must not be used.
    DIRECTION_UNSPECIFIED = 0;

    // Ascending.
    ASCENDING = 1;

    // Descending.
    DESCENDING = 2;
  }

  // The property to order by.
  PropertyReference property = 1;

  // The direction to order by. Defaults to `ASCENDING`.
  Direction direction = 2;
}

message Query {
  repeated Projection projection = 2;
  repeated KindExpression kind = 3;
  Filter filter = 4;
  repeated PropertyOrder order = 5;
  repeated PropertyReference distinct_on = 6;
  bytes start_cursor = 7;
  bytes end_cursor = 8;
  int32 offset = 10;
  google.protobuf.Int32Value limit = 12;
  FindNearest find_nearest = 13 [(field_behavior) = OPTIONAL];
}

message KindExpression {
  string name = 1;
}

message Filter {
  oneof filter_type {
    CompositeFilter composite_filter = 1;
    PropertyFilter property_filter = 2;
  }
}

message CompositeFilter {
  enum Operator {
    OPERATOR_UNSPECIFIED = 0;
    AND = 1;
    OR = 2;
  }
  Operator op = 1;
  repeated Filter filters = 2;
}

message PropertyFilter {
  enum Operator {
    OPERATOR_UNSPECIFIED = 0;
    LESS_THAN = 1;
    LESS_THAN_OR_EQUAL = 2;
    GREATER_THAN = 3;
    GREATER_THAN_OR_EQUAL = 4;
    EQUAL = 5;
    IN = 6;
    NOT_EQUAL = 9;
    HAS_ANCESTOR = 11;
    NOT_IN = 13;
  }
  PropertyReference property = 1;
  Operator op = 2;
  Value value = 3;
}

message PropertyReference {
  string name = 2;
}

message GqlQuery {
  string query_string = 1;
  bool allow_literals = 2;
  map<string, GqlQueryParameter> named_bindings = 3;
  repeated GqlQueryParameter positional_bindings = 4;
}

message GqlQueryParameter {
  oneof parameter_type {
    Value value = 1;
    bytes cursor = 2;
  }
}

message RunQueryResponse {
  QueryResultBatch batch = 1;
  Query query = 2;
  bytes transaction = 5;
  ExplainMetrics explain_metrics = 9;
}

message QueryResultBatch {
  // The possible values for the `more_results` field.
  enum MoreResultsType {
    // Unspecified. This value is never used.
    MORE_RESULTS_TYPE_UNSPECIFIED = 0;

    // There may be additional batches to fetch from this query.
    NOT_FINISHED = 1;

    // The query is finished, but there may be more results after the limit.
    MORE_RESULTS_AFTER_LIMIT = 2;

    // The query is finished, but there may be more results after the end
    // cursor.
    MORE_RESULTS_AFTER_CURSOR = 4;

    // The query is finished, and there are no more results.
    NO_MORE_RESULTS = 3;
  }

  // The number of results skipped, typically because of an offset.
  int32 skipped_results = 6;

  // A cursor that points to the position after the last skipped result.
  // Will be set when `skipped_results` != 0.
  bytes skipped_cursor = 3;

  // The result type for every entity in `entity_results`.
  EntityResult.ResultType entity_result_type = 1;

  // The results for this batch.
  repeated EntityResult entity_results = 2;

  // A cursor that points to the position after the last result in the batch.
  bytes end_cursor = 4;

  // The state of the query after the current batch.
  MoreResultsType more_results = 5;

  // The version number of the snapshot this batch was returned from.
  // This applies to the range of results from the query's `start_cursor` (or
  // the beginning of the query if no cursor was given) to this batch's
  // `end_cursor` (not the query's `end_cursor`).
  //
  // In a single transaction, subsequent query result batches for the same query
  // can have a greater snapshot version number. Each batch's snapshot version
  // is valid for all preceding batches.
  // The value will be zero for eventually consistent queries.
  int64 snapshot_version = 7;

  // Read timestamp this batch was returned from.
  // This applies to the range of results from the query's `start_cursor` (or
  // the beginning of the query if no cursor was given) to this batch's
  // `end_cursor` (not the query's `end_cursor`).
  //
  // In a single transaction, subsequent query result batches for the same query
  // can have a greater timestamp. Each batch's read timestamp
  // is valid for all preceding batches.
  // This value will not be set for eventually consistent queries in Cloud
  // Datastore.
  google.protobuf.Timestamp read_time = 8;
}

// Basic Commit
message CommitRequest {
  // The modes available for commits.
  enum Mode {
    // Unspecified. This value must not be used.
    MODE_UNSPECIFIED = 0;

    // Transactional: The mutations are either all applied, or none are applied.
    // Learn about transactions
    // [here](https://cloud.google.com/datastore/docs/concepts/transactions).
    TRANSACTIONAL = 1;

    // Non-transactional: The mutations may not apply as all or none.
    NON_TRANSACTIONAL = 2;
  }

  // Required. The ID of the project against which to make the request.
  string project_id = 8 [(field_behavior) = REQUIRED];

  // The ID of the database against which to make the request.
  //
  // '(default)' is not allowed; please use empty string '' to refer the default
  // database.
  string database_id = 9;

  // The type of commit to perform. Defaults to `TRANSACTIONAL`.
  Mode mode = 5;

  // Must be set when mode is `TRANSACTIONAL`.
  oneof transaction_selector {
    // The identifier of the transaction associated with the commit. A
    // transaction identifier is returned by a call to
    // [Datastore.BeginTransaction][google.datastore.v1.Datastore.BeginTransaction].
    bytes transaction = 1;

    // Options for beginning a new transaction for this request.
    // The transaction is committed when the request completes. If specified,
    // [TransactionOptions.mode][google.datastore.v1.TransactionOptions] must be
    // [TransactionOptions.ReadWrite][google.datastore.v1.TransactionOptions.ReadWrite].
    TransactionOptions single_use_transaction = 10;
  }

  // The mutations to perform.
  //
  // When mode is `TRANSACTIONAL`, mutations affecting a single entity are
  // applied in order. The following sequences of mutations affecting a single
  // entity are not permitted in a single `Commit` request:
  //
  // - `insert` followed by `insert`
  // - `update` followed by `insert`
  // - `upsert` followed by `insert`
  // - `delete` followed by `update`
  //
  // When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single
  // entity.
  repeated Mutation mutations = 6;
}

message Mutation {
  enum ConflictResolutionStrategy {
    STRATEGY_UNSPECIFIED = 0;
    SERVER_VALUE = 1;
    FAIL = 3;
  }

  oneof operation {
    Entity insert = 4;
    Entity update = 5;
    Entity upsert = 6;
    Key delete = 7;
  }
  oneof conflict_detection_strategy {
    int64 base_version = 8;
    google.protobuf.Timestamp update_time = 11;
  }
  ConflictResolutionStrategy conflict_resolution_strategy = 10;
  PropertyMask property_mask = 9;
  repeated PropertyTransform property_transforms = 12
      [(field_behavior) = OPTIONAL];

}

message PropertyTransform {
  enum ServerValue {
    SERVER_VALUE_UNSPECIFIED = 0;
    REQUEST_TIME = 1;
  }
  string property = 1 [(field_behavior) = OPTIONAL];
  oneof transform_type {
    ServerValue set_to_server_value = 2;
    Value increment = 3;
    Value maximum = 4;
    Value minimum = 5;
    ArrayValue append_missing_elements = 6;
    ArrayValue remove_all_from_array = 7;
  }
}

message CommitResponse {
  repeated MutationResult mutation_results = 3;
  int32 index_updates = 4;
  google.protobuf.Timestamp commit_time = 8;
}

message MutationResult {
  // The automatically allocated key.
  // Set only when the mutation allocated a key.
  Key key = 3;

  // The version of the entity on the server after processing the mutation. If
  // the mutation doesn't change anything on the server, then the version will
  // be the version of the current entity or, if no entity is present, a version
  // that is strictly greater than the version of any previous entity and less
  // than the version of any possible future entity.
  int64 version = 4;

  // The create time of the entity. This field will not be set after a 'delete'.
  google.protobuf.Timestamp create_time = 7;

  // The update time of the entity on the server after processing the mutation.
  // If the mutation doesn't change anything on the server, then the timestamp
  // will be the update timestamp of the current entity. This field will not be
  // set after a 'delete'.
  google.protobuf.Timestamp update_time = 6;

  // Whether a conflict was detected for this mutation. Always false when a
  // conflict detection strategy field is not set in the mutation.
  bool conflict_detected = 5;

  // The results of applying each
  // [PropertyTransform][google.datastore.v1.PropertyTransform], in the same
  // order of the request.
  repeated Value transform_results = 8;
}

message RollbackRequest {
  string project_id = 8 [(field_behavior) = REQUIRED];
  string database_id = 9;
  bytes transaction = 1 [(field_behavior) = REQUIRED];
}

message RollbackResponse {
}

message AllocateIdsRequest {
  string project_id = 8 [(field_behavior) = REQUIRED];
  string database_id = 9;
  repeated Key keys = 1 [(field_behavior) = REQUIRED];
}

message AllocateIdsResponse {
  repeated Key keys = 1;
}

message ReserveIdsRequest {
  string project_id = 8 [(field_behavior) = REQUIRED];
  string database_id = 9;
  repeated Key keys = 1 [(field_behavior) = REQUIRED];
}

message ReserveIdsResponse {}
