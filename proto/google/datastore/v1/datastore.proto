syntax = "proto3";

package google.datastore.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";


import "google/protobuf/descriptor.proto";


extend google.protobuf.FieldOptions {
  repeated FieldBehavior field_behavior = 1052 [packed = false];
}

enum FieldBehavior {
  FIELD_BEHAVIOR_UNSPECIFIED = 0;
  OPTIONAL = 1;
  REQUIRED = 2;
  OUTPUT_ONLY = 3;
  INPUT_ONLY = 4;
  IMMUTABLE = 5;
  UNORDERED_LIST = 6;
  NON_EMPTY_DEFAULT = 7;
  IDENTIFIER = 8;
}

service Datastore {
  // Just starting with a simple Ping method for testing connection
  rpc Ping(PingRequest) returns (PingResponse);
  
  // The basic Datastore methods we'll implement later
  rpc BeginTransaction(BeginTransactionRequest) returns (BeginTransactionResponse);
  rpc Lookup(LookupRequest) returns (LookupResponse);
  rpc RunQuery(RunQueryRequest) returns (RunQueryResponse);
  rpc Commit(CommitRequest) returns (CommitResponse);
  rpc Rollback(RollbackRequest) returns (RollbackResponse);
}

// Custom message for testing connection
message PingRequest {
  string message = 1;
}

message PingResponse {
  string message = 1;
  google.protobuf.Timestamp server_time = 2;
}

// Basic messages needed for BeginTransaction
message BeginTransactionRequest {
  string project_id = 1;
  string database_id = 2;
  TransactionOptions transaction_options = 3;
}

message BeginTransactionResponse {
  bytes transaction = 1;
}

message TransactionOptions {
  oneof mode {
    ReadWrite read_write = 1;
    ReadOnly read_only = 2;
  }
  
  message ReadWrite {
    bytes previous_transaction = 1;
  }
  
  message ReadOnly {
    google.protobuf.Timestamp read_time = 1;
  }
}

// Placeholder for other message types we'll implement later
message LookupRequest {
  string project_id = 8 [(field_behavior) = REQUIRED];
  string database_id = 9;
  ReadOptions read_options = 1;
  repeated Key keys = 3 [(field_behavior) = REQUIRED];
  PropertyMask property_mask = 5;
}

message LookupResponse {
  repeated EntityResult found = 1;
  repeated EntityResult missing = 2;
  repeated Key deferred = 3;
}

// Simplified versions of core data types
message Key {
  PartitionId partition_id = 1;
  repeated PathElement path = 2;
  
  message PathElement {
    string kind = 1;
    oneof id_type {
      int64 id = 2;
      string name = 3;
    }
  }
}

message PartitionId {
  string project_id = 1;
  string database_id = 2;
  string namespace_id = 3;
}

message EntityResult {
  Entity entity = 1;
  enum ResultType {
    RESULT_TYPE_UNSPECIFIED = 0;
    FULL = 1;
    PROJECTION = 2;
    KEY_ONLY = 3;
  }
  ResultType result_type = 2;
}

message Entity {
  Key key = 1;
  map<string, Value> properties = 3;
}

enum NullValue {
  NULL_VALUE = 0;
}

message LatLng {
  double latitude = 1;
  double longitude = 2;
}

message Value {
  oneof value_type {
    NullValue null_value = 11;  // Now just use the simple name
    bool boolean_value = 1;
    int64 integer_value = 2;
    double double_value = 3;
    google.protobuf.Timestamp timestamp_value = 10;
    Key key_value = 5;
    string string_value = 17;
    bytes blob_value = 18;
    LatLng geo_point_value = 8;
    Entity entity_value = 6;
    ArrayValue array_value = 9;
  }
  int32 meaning = 14;
  bool exclude_from_indexes = 19;
}


message ArrayValue {
  repeated Value values = 1;
}

message ReadOptions {
  enum ReadConsistency {
    // Unspecified. This value must not be used.
    READ_CONSISTENCY_UNSPECIFIED = 0;

    // Strong consistency.
    STRONG = 1;

    // Eventual consistency.
    EVENTUAL = 2;
  }

  oneof consistency_type {
    ReadConsistency read_consistency = 1;
    bytes transaction = 2;
    TransactionOptions new_transaction = 3;
    google.protobuf.Timestamp read_time = 4;
  }
}

message PropertyMask {
  repeated string paths = 1;
}

message ExplainOptions {
  bool analyze = 1;
}

message RunQueryRequest {
  string project_id = 8 [(field_behavior) = REQUIRED];
  string database_id = 9;
  PartitionId partition_id = 2;
  ReadOptions read_options = 1;

  oneof query_type {
    Query query = 3;
    GqlQuery gql_query = 7;
  }
  PropertyMask property_mask = 10;
  ExplainOptions explain_options = 12 [(field_behavior) = OPTIONAL];
}

message Projection {
  // The property to project.
  PropertyReference property = 1;
}

message FindNearest {
  // The distance measure to use when comparing vectors.
  enum DistanceMeasure {
    // Should not be set.
    DISTANCE_MEASURE_UNSPECIFIED = 0;

    // Measures the EUCLIDEAN distance between the vectors. See
    // [Euclidean](https://en.wikipedia.org/wiki/Euclidean_distance) to learn
    // more. The resulting distance decreases the more similar two vectors are.
    EUCLIDEAN = 1;

    // COSINE distance compares vectors based on the angle between them, which
    // allows you to measure similarity that isn't based on the vectors
    // magnitude. We recommend using DOT_PRODUCT with unit normalized vectors
    // instead of COSINE distance, which is mathematically equivalent with
    // better performance. See [Cosine
    // Similarity](https://en.wikipedia.org/wiki/Cosine_similarity) to learn
    // more about COSINE similarity and COSINE distance. The resulting COSINE
    // distance decreases the more similar two vectors are.
    COSINE = 2;

    // Similar to cosine but is affected by the magnitude of the vectors. See
    // [Dot Product](https://en.wikipedia.org/wiki/Dot_product) to learn more.
    // The resulting distance increases the more similar two vectors are.
    DOT_PRODUCT = 3;
  }

  // Required. An indexed vector property to search upon. Only documents which
  // contain vectors whose dimensionality match the query_vector can be
  // returned.
  PropertyReference vector_property = 1
      [(field_behavior) = REQUIRED];

  // Required. The query vector that we are searching on. Must be a vector of no
  // more than 2048 dimensions.
  Value query_vector = 2 [(field_behavior) = REQUIRED];

  // Required. The Distance Measure to use, required.
  DistanceMeasure distance_measure = 3 [(field_behavior) = REQUIRED];

  // Required. The number of nearest neighbors to return. Must be a positive
  // integer of no more than 100.
  google.protobuf.Int32Value limit = 4 [(field_behavior) = REQUIRED];

  // Optional. Optional name of the field to output the result of the vector
  // distance calculation. Must conform to [entity
  // property][google.datastore.v1.Entity.properties] limitations.
  string distance_result_property = 5 [(field_behavior) = OPTIONAL];

  // Optional. Option to specify a threshold for which no less similar documents
  // will be returned. The behavior of the specified `distance_measure` will
  // affect the meaning of the distance threshold. Since DOT_PRODUCT distances
  // increase when the vectors are more similar, the comparison is inverted.
  //
  // For EUCLIDEAN, COSINE: WHERE distance <= distance_threshold
  // For DOT_PRODUCT:       WHERE distance >= distance_threshold
  google.protobuf.DoubleValue distance_threshold = 6
      [(field_behavior) = OPTIONAL];
}
message PropertyOrder {
  // The sort direction.
  enum Direction {
    // Unspecified. This value must not be used.
    DIRECTION_UNSPECIFIED = 0;

    // Ascending.
    ASCENDING = 1;

    // Descending.
    DESCENDING = 2;
  }

  // The property to order by.
  PropertyReference property = 1;

  // The direction to order by. Defaults to `ASCENDING`.
  Direction direction = 2;
}

message Query {
  repeated Projection projection = 2;
  repeated KindExpression kind = 3;
  Filter filter = 4;
  repeated PropertyOrder order = 5;
  repeated PropertyReference distinct_on = 6;
  bytes start_cursor = 7;
  bytes end_cursor = 8;
  int32 offset = 10;
  google.protobuf.Int32Value limit = 12;
  FindNearest find_nearest = 13 [(field_behavior) = OPTIONAL];
}

message KindExpression {
  string name = 1;
}

message Filter {
  oneof filter_type {
    CompositeFilter composite_filter = 1;
    PropertyFilter property_filter = 2;
  }
}

message CompositeFilter {
  enum Operator {
    OPERATOR_UNSPECIFIED = 0;
    AND = 1;
    OR = 2;
  }
  Operator op = 1;
  repeated Filter filters = 2;
}

message PropertyFilter {
  enum Operator {
    OPERATOR_UNSPECIFIED = 0;
    LESS_THAN = 1;
    LESS_THAN_OR_EQUAL = 2;
    GREATER_THAN = 3;
    GREATER_THAN_OR_EQUAL = 4;
    EQUAL = 5;
    IN = 6;
    NOT_EQUAL = 9;
    HAS_ANCESTOR = 11;
    NOT_IN = 13;
  }
  PropertyReference property = 1;
  Operator op = 2;
  Value value = 3;
}

message PropertyReference {
  string name = 2;
}

message GqlQuery {
  string query_string = 1;
  bool allow_literals = 2;
  map<string, GqlQueryParameter> named_bindings = 3;
  repeated GqlQueryParameter positional_bindings = 4;
}

message GqlQueryParameter {
  oneof parameter_type {
    Value value = 1;
    bytes cursor = 2;
  }
}

message RunQueryResponse {
  QueryResultBatch batch = 1;
}

message QueryResultBatch {
  repeated EntityResult entity_results = 1;
  enum MoreResultsType {
    MORE_RESULTS_TYPE_UNSPECIFIED = 0;
    NOT_FINISHED = 1;
    MORE_RESULTS_AFTER_LIMIT = 2;
    NO_MORE_RESULTS = 3;
  }
  MoreResultsType more_results = 2;
  bytes end_cursor = 3;
}

// Basic Commit
message CommitRequest {
  enum Mode {
    MODE_UNSPECIFIED = 0;
    TRANSACTIONAL = 1;
    NON_TRANSACTIONAL = 2;
  }
  string project_id = 8 [(field_behavior) = REQUIRED];
  string database_id = 9;
  Mode mode = 5;
  oneof transaction_selector {
    bytes transaction = 1;
    TransactionOptions single_use_transaction = 10;
  }
  repeated Mutation mutations = 6;
}

message Mutation {
  enum ConflictResolutionStrategy {
    STRATEGY_UNSPECIFIED = 0;
    SERVER_VALUE = 1;
    FAIL = 3;
  }

  oneof operation {
    Entity insert = 4;
    Entity update = 5;
    Entity upsert = 6;
    Key delete = 7;
  }
  oneof conflict_detection_strategy {
    int64 base_version = 8;
    google.protobuf.Timestamp update_time = 11;
  }
  ConflictResolutionStrategy conflict_resolution_strategy = 10;
  PropertyMask property_mask = 9;
  repeated PropertyTransform property_transforms = 12
      [(field_behavior) = OPTIONAL];

}

message PropertyTransform {
  enum ServerValue {
    SERVER_VALUE_UNSPECIFIED = 0;
    REQUEST_TIME = 1;
  }
  string property = 1 [(field_behavior) = OPTIONAL];
  oneof transform_type {
    ServerValue set_to_server_value = 2;
    Value increment = 3;
    Value maximum = 4;
    Value minimum = 5;
    ArrayValue append_missing_elements = 6;
    ArrayValue remove_all_from_array = 7;
  }
}
message CommitResponse {
  repeated MutationResult mutation_results = 1;
  int32 index_updates = 2;
}

message MutationResult {
  Key key = 1;
}

message RollbackRequest {
  string project_id = 1;
  string database_id = 2;
  bytes transaction = 3;
}

message RollbackResponse {
}

